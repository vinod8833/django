venv1

# Django #
*.log
*.pot
*.pyc
__pycache__
db.sqlite3
media

# Backup files # 
*.bak 

# If you are using PyCharm # 
# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# File-based project format
*.iws

# IntelliJ
out/

# JIRA plugin
atlassian-ide-plugin.xml

# Python # 
*.py[cod] 
*$py.class 

# Distribution / packaging 
.Python build/ 
develop-eggs/ 
dist/ 
downloads/ 
eggs/ 
.eggs/ 
lib/ 
lib64/ 
parts/ 
sdist/ 
var/ 
wheels/ 
*.egg-info/ 
.installed.cfg 
*.egg 
*.manifest 
*.spec 

# Installer logs 
pip-log.txt 
pip-delete-this-directory.txt 

# Unit test / coverage reports 
htmlcov/ 
.tox/ 
.coverage 
.coverage.* 
.cache 
.pytest_cache/ 
nosetests.xml 
coverage.xml 
*.cover 
.hypothesis/ 

# Jupyter Notebook 
.ipynb_checkpoints 

# pyenv 
.python-version 

# celery 
celerybeat-schedule.* 

# SageMath parsed files 
*.sage.py 

# Environments 
.env 
.venv 
env/ 
venv/ 
ENV/ 
env.bak/ 
venv.bak/ 

# mkdocs documentation 
/site 

# mypy 
.mypy_cache/ 

# Sublime Text # 
*.tmlanguage.cache 
*.tmPreferences.cache 
*.stTheme.cache 
*.sublime-workspace 
*.sublime-project 

# sftp configuration file 
sftp-config.json 

# Package control specific files Package 
Control.last-run 
Control.ca-list 
Control.ca-bundle 
Control.system-ca-bundle 
GitHub.sublime-settings 

# Visual Studio Code # 
.vscode/* 
!.vscode/settings.json 
!.vscode/tasks.json 
!.vscode/launch.json 
!.vscode/extensions.json 
.history
What we are ignoring and not with this Django .gitignore#
Migrations#
A common question is: "why aren't we ignoring migrations?". Wouldn't it make sense to create the migrations on the server and then migrate them right away? Yes, in some cases that would make sense, but there is a big issue with that. You will always want to have the same migrations on your development machine as on the server. Imagine this: you want a field to be False for every record. You create a new field with default=False, in this case all fields are fields. Then you decide to change the field and change the default to True. The current fields are still marked as False since you ran that migration first. If you wouldn't commit the migration files, all fields would be True since the production server wouldn't know that it was False previously.

Next to that, Django recommends including migration files as they are part of the code base:

The migration files for each app live in a “migrations” directory inside of that app, and are designed to be committed to, and distributed as part of, its codebase. You should be making them once on your development machine and then running the same migrations on your colleagues’ machines, your staging machines, and eventually your production machines.

Source

.pyc files#
Python will always compile your code to byte code. This is saved in the .pyc files. You can't do much with that and we don't need it, python will create them anyway. It's best to just ignore them through .gitignore.

Django gitignore tips-tricks

Written by Stan Triepels
Stan is professional web developer working mainly with Django and VueJS. With years of experience under the belt, he is comfortable writing about his past mistakes and ongoing learnings.

Login
Add a comment
ADD COMMENT
M ↓   MARKDOWN
UpvotesNewestOldest
?
Anonymous
0 points3 years ago
What about static & media files?

S
Stan
0 points3 years ago
Static files should be part of your code base. Media is ignored (see 7th line of the gitignore). Media files are files uploaded by users and those should never be part of your code base.

?
Anonymous
0 points19 months ago
Shouldn't the whole .idea folder be ignored? What's your practice?

S
Stan
0 points19 months ago
It doesn't have to. I think there are specific files that you can share to get a more similar workflow. I personally don't use PyCharm, so I can't really comment much on this.

Having said that, I just looked it up and this is what they recommend: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839-How-to-manage-projects-under-Version-Control-Systems. I have just adapted the gitignore slightly to work better with that.

J
js-venus
0 points7 months ago
Thanks!

?
Anonymous
0 points6 months ago
In a Django project, should I be uploading my sqlite3 database?

S
Stan
0 points6 months ago
I wouldn't do that. The database shouldn't live in git history and it would become really hard to deploy new versions without overwriting changes to the database as well.

?
Anonymous
0 points4 months ago
Thank you!

?
Anonymous
0 points13 days ago
Can I use the code in my own project?

S
Stan
0 points12 days ago
Yes you can!

?
Anonymous
0 points2 days ago
Thank's for those explanations. Please, what's your strategy about settings.py file ?

Commento
Copyright 2017 - 2021 | Stan Triepels - Djangowaves

Privacy Policy | Terms of Service